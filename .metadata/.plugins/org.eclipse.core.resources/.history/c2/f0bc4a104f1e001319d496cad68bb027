package core;

import actors.Bear;
import actors.Chicken;
import actors.Obstacle;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

import controllers.ObstacleController;

public class Og implements ApplicationListener {
	private static float width;
	private static float height;

	private OrthographicCamera camera;
	private ObstacleController obsController;
	private Bear bear;
	private Chicken chicken;
	private SpriteBatch batch;
	
	private Music bgMusic;

	/**
	 * Get the width of the visible area
	 * 
	 * @return
	 */
	public static float getWidth() {
		return width;
	}

	/**
	 * Get the height of the visible area
	 * 
	 * @return
	 */
	public static float getHeight() {
		return height;
	}

	/**
	 * Standard ApplicationListener first entry point. Put code here if we need
	 * it to run before render loop kicks off
	 */
	@Override
	public void create() {
		System.out.println("Path: "+Gdx.files.getExternalStoragePath());
		Og.width = Gdx.graphics.getWidth() * 3;
		Og.height = Gdx.graphics.getHeight() * 3;
		camera = new OrthographicCamera(Og.getWidth(), Og.getHeight());
		obsController = new ObstacleController();
		bear = new Bear(new Sprite(), 0,0);
		bear.createAnimation();
		chicken = new Chicken(new Sprite(), -200, -200);
		chicken.createAnimation();
		batch = new SpriteBatch();
		
		bgMusic = Gdx.audio.newMusic(Gdx.files.local("src/sound/placeHolderBG.wav"));
		bgMusic.setLooping(true);
		bgMusic.setVolume((float)0.5);
		bgMusic.play();
	}

	/**
	 * Standard {@link com.badlogic.gdx.ApplicationListener} entry point. This
	 * is the last thing we will run. Be sure to clean up all remaining objects
	 * at this point
	 */
	@Override
	public void dispose() {
		obsController.dispose();
		bear.dispose();
		chicken.dispose();
		batch.dispose();
		bgMusic.stop();
		bgMusic.dispose();
	}

	/**
	 * {@link com.badlogic.gdx.ApplicationListener} pause method. TODO: Decide
	 * on expected behaviour during a pause and implement. {@link #resume()}
	 * will need implementing also
	 */
	@Override
	public void pause() {
		// TODO Auto-generated method stub

	}

	/**
	 * Render loop. This loop will be called every frame. Should update all
	 * known objects and then draw them by adding them to the
	 * {@link com.badlogic.gdx.graphics.g2d.SpriteBatch batch}
	 */
	@Override
	public void render() {
		Gdx.gl.glClearColor(0, 0, 0.2f, 1);
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);

		camera.update();
		obsController.update();

		batch.setProjectionMatrix(camera.combined);
		batch.begin();
		bear.startRender(batch);
		chicken.startRender(batch);
		for (Obstacle obstacle : obsController.getObstacles()) {
			batch.draw(obstacle.getSprite(), obstacle.getX(), obstacle.getY());
		}
		batch.end();
	}

	/**
	 * Method that will be called when the user resizes the window TODO: Resize
	 * the background and all known objects
	 */
	@Override
	public void resize(int arg0, int arg1) {
		// TODO Auto-generated method stub

	}

	/**
	 * Partner method to {@link #pause()}. Will be called when the player
	 * unpauses the game
	 */
	@Override
	public void resume() {
		// TODO Auto-generated method stub

	}

}
